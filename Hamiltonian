#include <stdio.h>
#define V 5

int graph[V][V] = {
    {0, 1, 0, 1, 0},
    {1, 0, 1, 1, 1},
    {0, 1, 0, 0, 1},
    {1, 1, 0, 0, 1},
    {0, 1, 1, 1, 0}
};

int path[V]; // stores Hamiltonian path

int isSafe(int v, int pos) {
    if (graph[path[pos - 1]][v] == 0)
        return 0;
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return 0;
    return 1;
}

int solve(int pos) {
    if (pos == V) {
        return graph[path[pos - 1]][path[0]] == 1;
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, pos)) {
            path[pos] = v;
            if (solve(pos + 1))
                return 1;
            path[pos] = -1;
        }
    }
    return 0;
}

void printSolution() {
    for (int i = 0; i < V; i++)
        printf("%d ", path[i]);
    printf("%d\n", path[0]); // to show cycle
}

int main() {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0;

    if (solve(1))
        printSolution();
    else
        printf("No Hamiltonian Cycle\n");

    return 0;
}
